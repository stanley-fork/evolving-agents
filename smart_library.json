[
  {
    "id": "0439c4b5-d530-4cb0-973a-d852c111215d",
    "name": "BasicDocumentAnalyzer",
    "record_type": "TOOL",
    "domain": "document_processing",
    "description": "A basic tool that analyzes documents to determine their type",
    "code_snippet": "\nfrom typing import Dict, Any\nfrom pydantic import BaseModel, Field\n\nfrom beeai_framework.context import RunContext\nfrom beeai_framework.emitter.emitter import Emitter\nfrom beeai_framework.tools.tool import StringToolOutput, Tool, ToolRunOptions\n\nclass DocumentAnalyzerInput(BaseModel):\n    text: str = Field(description=\"Document text to analyze\")\n\nclass BasicDocumentAnalyzer(Tool[DocumentAnalyzerInput, ToolRunOptions, StringToolOutput]):\n    \"\"\"A basic tool that analyzes documents to determine their type.\"\"\"\n    name = \"BasicDocumentAnalyzer\"\n    description = \"Analyzes document content to determine if it's an invoice, receipt, or other document type\"\n    input_schema = DocumentAnalyzerInput\n\n    def _create_emitter(self) -> Emitter:\n        return Emitter.root().child(\n            namespace=[\"tool\", \"document\", \"analyzer\"],\n            creator=self,\n        )\n    \n    async def _run(self, input: DocumentAnalyzerInput, options: ToolRunOptions | None, context: RunContext) -> StringToolOutput:\n        \"\"\"Analyze document text to determine its type.\"\"\"\n        doc_text = input.text.lower()\n        \n        # Simple keyword matching\n        result = {\"type\": \"unknown\", \"confidence\": 0.0}\n        \n        if \"invoice\" in doc_text and (\"total\" in doc_text or \"amount\" in doc_text):\n            result = {\"type\": \"invoice\", \"confidence\": 0.7}\n        elif \"receipt\" in doc_text:\n            result = {\"type\": \"receipt\", \"confidence\": 0.6}\n        elif \"contract\" in doc_text:\n            result = {\"type\": \"contract\", \"confidence\": 0.6}\n        \n        import json\n        return StringToolOutput(json.dumps(result, indent=2))\n",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-21T14:52:37.249876",
    "last_updated": "2025-03-21T14:52:37.249892",
    "tags": [
      "document",
      "analysis",
      "basic"
    ],
    "metadata": {},
    "performance_metrics": {
      "total_executions": 0,
      "successful_executions": 0,
      "average_execution_time": 0.0,
      "capabilities": {},
      "domains": {},
      "last_execution": null
    },
    "capabilities": [
      {
        "id": "document_type_detection",
        "name": "Document Type Detection",
        "description": "Detects the type of document from its content",
        "context": {
          "required_fields": [
            "document_text"
          ],
          "produced_fields": [
            "document_type",
            "confidence_score"
          ]
        }
      }
    ]
  },
  {
    "id": "baece609-0cc4-4af0-ae1d-5df15c820b8b",
    "name": "BasicInvoiceProcessor",
    "record_type": "AGENT",
    "domain": "document_processing",
    "description": "A basic agent that processes invoice documents to extract information",
    "code_snippet": "\nfrom typing import List, Dict, Any, Optional\nimport re\n\nfrom beeai_framework.agents.react import ReActAgent\nfrom beeai_framework.agents.types import AgentMeta\nfrom beeai_framework.memory import TokenMemory\nfrom beeai_framework.backend.chat import ChatModel\nfrom beeai_framework.tools.tool import Tool\n\nclass BasicInvoiceProcessorInitializer:\n    \"\"\"\n    A basic agent that processes invoice documents to extract information.\n    It can extract simple data like invoice number, date, and total amount.\n    \"\"\"\n    \n    @staticmethod\n    def create_agent(llm: ChatModel, tools: Optional[List[Tool]] = None) -> ReActAgent:\n        \"\"\"Create and configure the invoice processor agent.\"\"\"\n        # Use empty tools list if none provided\n        if tools is None:\n            tools = []\n            \n        # Define agent metadata\n        meta = AgentMeta(\n            name=\"BasicInvoiceProcessor\",\n            description=(\n                \"I am an invoice processing agent that can extract basic information from invoice documents \"\n                \"including invoice number, date, vendor, and total amount.\"\n            ),\n            tools=tools\n        )\n        \n        # Create the agent\n        agent = ReActAgent(\n            llm=llm,\n            tools=tools,\n            memory=TokenMemory(llm),\n            meta=meta\n        )\n        \n        return agent\n        \n    @staticmethod\n    async def process_invoice(invoice_text: str) -> Dict[str, Any]:\n        \"\"\"\n        Process an invoice to extract key information.\n        \n        Args:\n            invoice_text: The text of the invoice to process\n            \n        Returns:\n            Extracted invoice information\n        \"\"\"\n        # Extract invoice number\n        invoice_num_match = re.search(r'INVOICE #([\\w-]+)', invoice_text, re.IGNORECASE)\n        invoice_num = invoice_num_match.group(1) if invoice_num_match else \"Unknown\"\n        \n        # Extract date\n        date_match = re.search(r'Date:?\\s*([\\w\\d/-]+)', invoice_text, re.IGNORECASE)\n        date = date_match.group(1).strip() if date_match else \"Unknown\"\n        \n        # Extract vendor\n        vendor_match = re.search(r'Vendor:?\\s*([^\\n]+)', invoice_text, re.IGNORECASE)\n        vendor = vendor_match.group(1).strip() if vendor_match else \"Unknown\"\n        \n        # Extract total\n        total_match = re.search(r'Total\\s*(?:Due|Amount)?:?\\s*\\$?([\\d.,]+)', invoice_text, re.IGNORECASE)\n        total = total_match.group(1).strip() if total_match else \"Unknown\"\n        \n        return {\n            \"invoice_number\": invoice_num,\n            \"date\": date,\n            \"vendor\": vendor,\n            \"total\": total\n        }\n",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-21T14:52:37.252178",
    "last_updated": "2025-03-21T14:52:37.252200",
    "tags": [
      "invoice",
      "processing",
      "basic"
    ],
    "metadata": {},
    "performance_metrics": {
      "total_executions": 0,
      "successful_executions": 0,
      "average_execution_time": 0.0,
      "capabilities": {},
      "domains": {},
      "last_execution": null
    },
    "capabilities": [
      {
        "id": "invoice_data_extraction",
        "name": "Invoice Data Extraction",
        "description": "Extracts basic information from invoice documents",
        "context": {
          "required_fields": [
            "invoice_text"
          ],
          "produced_fields": [
            "invoice_number",
            "date",
            "vendor",
            "total"
          ]
        }
      }
    ]
  },
  {
    "id": "d4db3d47-dfa0-4ed7-b43a-cd86f85d033a",
    "name": "DocumentAnalyzerAgent",
    "record_type": "AGENT",
    "domain": "general",
    "description": "Develop an agent that uses the AdvancedDocumentAnalyzer tool to perform sophisticated analysis of invoice documents, ensuring high confidence in invoice detection and handling various formats.",
    "code_snippet": "# No code provided",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-21T14:54:37.496354",
    "last_updated": "2025-03-21T14:54:37.496363",
    "tags": [
      "general",
      "agent"
    ],
    "metadata": {
      "framework": "beeai",
      "creation_strategy": {
        "method": "direct_code",
        "timestamp": "2025-03-21T14:54:33.256474",
        "requirements_summary": null
      }
    },
    "performance_metrics": {
      "total_executions": 0,
      "successful_executions": 0,
      "average_execution_time": 0.0,
      "capabilities": {},
      "domains": {},
      "last_execution": null
    },
    "capabilities": [
      {
        "id": "invoice_detection",
        "name": "Invoice Detection",
        "description": "Detects and identifies invoice documents from a collection of files, ensuring high confidence in distinguishing invoices from other document types.",
        "context": {
          "required_fields": [
            "document_collection"
          ],
          "produced_fields": [
            "identified_invoices"
          ]
        }
      },
      {
        "id": "format_handling",
        "name": "Format Handling",
        "description": "Handles various invoice formats, allowing the agent to process invoices regardless of their layout or structure.",
        "context": {
          "required_fields": [
            "invoice_document"
          ],
          "produced_fields": [
            "standardized_invoice_data"
          ]
        }
      },
      {
        "id": "data_extraction",
        "name": "Data Extraction",
        "description": "Extracts relevant data fields from invoice documents, such as invoice number, date, total amount, and vendor information.",
        "context": {
          "required_fields": [
            "identified_invoices"
          ],
          "produced_fields": [
            "extracted_data_fields"
          ]
        }
      },
      {
        "id": "confidence_assessment",
        "name": "Confidence Assessment",
        "description": "Assesses the confidence level of the invoice detection and data extraction processes to ensure accuracy and reliability.",
        "context": {
          "required_fields": [
            "extracted_data_fields"
          ],
          "produced_fields": [
            "confidence_scores"
          ]
        }
      },
      {
        "id": "error_handling",
        "name": "Error Handling",
        "description": "Identifies and manages errors or inconsistencies in invoice processing, providing mechanisms for correction or reprocessing.",
        "context": {
          "required_fields": [
            "processing_errors"
          ],
          "produced_fields": [
            "error_reports",
            "corrected_data"
          ]
        }
      }
    ]
  },
  {
    "id": "3843f246-d23c-478c-8e63-e7e831041ab0",
    "name": "DataExtractionAgent",
    "record_type": "AGENT",
    "domain": "general",
    "description": "Develop an agent that utilizes the ComprehensiveDataExtractor tool to extract detailed information from invoices, including line items, totals, and tax information.",
    "code_snippet": "# No code provided",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-21T14:54:41.608270",
    "last_updated": "2025-03-21T14:54:41.608278",
    "tags": [
      "general",
      "agent"
    ],
    "metadata": {
      "framework": "beeai",
      "creation_strategy": {
        "method": "direct_code",
        "timestamp": "2025-03-21T14:54:38.769507",
        "requirements_summary": null
      }
    },
    "performance_metrics": {
      "total_executions": 0,
      "successful_executions": 0,
      "average_execution_time": 0.0,
      "capabilities": {},
      "domains": {},
      "last_execution": null
    },
    "capabilities": [
      {
        "id": "extract_line_items",
        "name": "Extract Line Items",
        "description": "Extracts detailed line item information from invoices, including item descriptions, quantities, and prices.",
        "context": {
          "required_fields": [
            "invoice_document"
          ],
          "produced_fields": [
            "line_items"
          ]
        }
      },
      {
        "id": "extract_totals",
        "name": "Extract Totals",
        "description": "Extracts total amounts from invoices, including subtotal, total, and any discounts applied.",
        "context": {
          "required_fields": [
            "invoice_document"
          ],
          "produced_fields": [
            "subtotal",
            "total",
            "discounts"
          ]
        }
      },
      {
        "id": "extract_tax_information",
        "name": "Extract Tax Information",
        "description": "Extracts tax-related information from invoices, such as tax rates and total tax amounts.",
        "context": {
          "required_fields": [
            "invoice_document"
          ],
          "produced_fields": [
            "tax_rates",
            "total_tax"
          ]
        }
      }
    ]
  },
  {
    "id": "1e4d3243-eb9e-4409-a725-0ff7963eb1c7",
    "name": "CalculationVerificationAgent",
    "record_type": "AGENT",
    "domain": "general",
    "description": "Develop an agent that uses the CalculationVerifier tool to ensure the accuracy of invoice calculations, verifying that the subtotal plus tax equals the total.",
    "code_snippet": "# No code provided",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-21T14:54:46.668577",
    "last_updated": "2025-03-21T14:54:46.668620",
    "tags": [
      "general",
      "agent"
    ],
    "metadata": {
      "framework": "beeai",
      "creation_strategy": {
        "method": "direct_code",
        "timestamp": "2025-03-21T14:54:43.433403",
        "requirements_summary": null
      }
    },
    "performance_metrics": {
      "total_executions": 0,
      "successful_executions": 0,
      "average_execution_time": 0.0,
      "capabilities": {},
      "domains": {},
      "last_execution": null
    },
    "capabilities": [
      {
        "id": "verify_invoice_calculation",
        "name": "Verify Invoice Calculation",
        "description": "Ensures the accuracy of invoice calculations by verifying that the subtotal plus tax equals the total.",
        "context": {
          "required_fields": [
            "subtotal",
            "tax",
            "total"
          ],
          "produced_fields": [
            "is_calculation_correct"
          ]
        }
      },
      {
        "id": "calculate_expected_total",
        "name": "Calculate Expected Total",
        "description": "Calculates the expected total by adding the subtotal and tax, providing a reference for verification.",
        "context": {
          "required_fields": [
            "subtotal",
            "tax"
          ],
          "produced_fields": [
            "expected_total"
          ]
        }
      },
      {
        "id": "identify_calculation_discrepancy",
        "name": "Identify Calculation Discrepancy",
        "description": "Identifies discrepancies between the calculated total and the provided total, indicating potential errors.",
        "context": {
          "required_fields": [
            "expected_total",
            "total"
          ],
          "produced_fields": [
            "discrepancy_amount"
          ]
        }
      }
    ]
  },
  {
    "id": "4f07a613-9a23-471a-bc63-3ef6044d3bb3",
    "name": "SummaryGenerationAgent",
    "record_type": "AGENT",
    "domain": "general",
    "description": "Develop an agent that uses the SummaryGenerator tool to create structured summaries of invoice data, highlighting key insights and metrics.",
    "code_snippet": "# No code provided",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-21T14:54:52.141398",
    "last_updated": "2025-03-21T14:54:52.141405",
    "tags": [
      "general",
      "agent"
    ],
    "metadata": {
      "framework": "beeai",
      "creation_strategy": {
        "method": "direct_code",
        "timestamp": "2025-03-21T14:54:48.458365",
        "requirements_summary": null
      }
    },
    "performance_metrics": {
      "total_executions": 0,
      "successful_executions": 0,
      "average_execution_time": 0.0,
      "capabilities": {},
      "domains": {},
      "last_execution": null
    },
    "capabilities": [
      {
        "id": "generate_invoice_summary",
        "name": "Generate Invoice Summary",
        "description": "Creates a structured summary of invoice data, highlighting key insights and metrics such as total amount, due date, and payment status.",
        "context": {
          "required_fields": [
            "invoice_data"
          ],
          "produced_fields": [
            "summary"
          ]
        }
      },
      {
        "id": "highlight_key_metrics",
        "name": "Highlight Key Metrics",
        "description": "Identifies and highlights key metrics from the invoice data, such as total amount, taxes, discounts, and payment terms.",
        "context": {
          "required_fields": [
            "invoice_data"
          ],
          "produced_fields": [
            "key_metrics"
          ]
        }
      },
      {
        "id": "extract_insights",
        "name": "Extract Insights",
        "description": "Extracts insights from the invoice data, such as spending trends, frequent vendors, and payment patterns.",
        "context": {
          "required_fields": [
            "invoice_data"
          ],
          "produced_fields": [
            "insights"
          ]
        }
      },
      {
        "id": "format_summary",
        "name": "Format Summary",
        "description": "Formats the generated summary into a structured and readable format for easy understanding and presentation.",
        "context": {
          "required_fields": [
            "summary"
          ],
          "produced_fields": [
            "formatted_summary"
          ]
        }
      }
    ]
  },
  {
    "id": "716d90f9-eb87-4d54-b321-a01e0db19254",
    "name": "ErrorDetectionAgent",
    "record_type": "AGENT",
    "domain": "general",
    "description": "Develop an agent that uses the ErrorDetector tool to identify and flag potential errors in invoices, such as missing fields or incorrect calculations.",
    "code_snippet": "# No code provided",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-21T14:54:56.539875",
    "last_updated": "2025-03-21T14:54:56.539893",
    "tags": [
      "general",
      "agent"
    ],
    "metadata": {
      "framework": "beeai",
      "creation_strategy": {
        "method": "direct_code",
        "timestamp": "2025-03-21T14:54:53.314918",
        "requirements_summary": null
      }
    },
    "performance_metrics": {
      "total_executions": 0,
      "successful_executions": 0,
      "average_execution_time": 0.0,
      "capabilities": {},
      "domains": {},
      "last_execution": null
    },
    "capabilities": [
      {
        "id": "detect_missing_fields",
        "name": "Detect Missing Fields",
        "description": "Identifies and flags invoices with missing required fields.",
        "context": {
          "required_fields": [
            "invoice_data"
          ],
          "produced_fields": [
            "missing_fields_report"
          ]
        }
      },
      {
        "id": "validate_calculations",
        "name": "Validate Calculations",
        "description": "Checks for incorrect calculations in invoice totals and line items.",
        "context": {
          "required_fields": [
            "invoice_data"
          ],
          "produced_fields": [
            "calculation_errors_report"
          ]
        }
      },
      {
        "id": "flag_potential_errors",
        "name": "Flag Potential Errors",
        "description": "Flags potential errors in invoices for further review.",
        "context": {
          "required_fields": [
            "invoice_data"
          ],
          "produced_fields": [
            "error_flags"
          ]
        }
      }
    ]
  },
  {
    "id": "3b9cd50c-7c96-4549-8272-8bd4f65ca86c",
    "name": "ComponentIntegrationAgent",
    "record_type": "AGENT",
    "domain": "general",
    "description": "Develop an agent responsible for integrating all components into a cohesive system, ensuring seamless data flow and interaction between agents and tools.",
    "code_snippet": "# No code provided",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-21T14:55:03.743781",
    "last_updated": "2025-03-21T14:55:03.743790",
    "tags": [
      "general",
      "agent"
    ],
    "metadata": {
      "framework": "beeai",
      "creation_strategy": {
        "method": "direct_code",
        "timestamp": "2025-03-21T14:54:57.864324",
        "requirements_summary": null
      }
    },
    "performance_metrics": {
      "total_executions": 0,
      "successful_executions": 0,
      "average_execution_time": 0.0,
      "capabilities": {},
      "domains": {},
      "last_execution": null
    },
    "capabilities": [
      {
        "id": "component_integration",
        "name": "Component Integration",
        "description": "Integrates various components into a single cohesive system, ensuring they work together seamlessly.",
        "context": {
          "required_fields": [
            "components_list",
            "integration_rules"
          ],
          "produced_fields": [
            "integrated_system"
          ]
        }
      },
      {
        "id": "data_flow_management",
        "name": "Data Flow Management",
        "description": "Manages the flow of data between different components, ensuring data is transferred accurately and efficiently.",
        "context": {
          "required_fields": [
            "data_sources",
            "data_destinations"
          ],
          "produced_fields": [
            "data_flow_map"
          ]
        }
      },
      {
        "id": "interaction_facilitation",
        "name": "Interaction Facilitation",
        "description": "Facilitates interaction between agents and tools, ensuring they can communicate and operate together effectively.",
        "context": {
          "required_fields": [
            "agents",
            "tools"
          ],
          "produced_fields": [
            "interaction_protocols"
          ]
        }
      },
      {
        "id": "system_cohesion_maintenance",
        "name": "System Cohesion Maintenance",
        "description": "Maintains the cohesion of the integrated system, ensuring all components remain compatible and functional over time.",
        "context": {
          "required_fields": [
            "system_state",
            "compatibility_checks"
          ],
          "produced_fields": [
            "cohesion_report"
          ]
        }
      },
      {
        "id": "error_handling",
        "name": "Error Handling",
        "description": "Identifies and resolves errors in the integration process, ensuring minimal disruption to the system.",
        "context": {
          "required_fields": [
            "error_logs",
            "system_status"
          ],
          "produced_fields": [
            "error_resolution_plan"
          ]
        }
      }
    ]
  }
]