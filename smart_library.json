[
  {
    "id": "7e7a5e2d-f89e-4c09-a407-4f93d6632437",
    "name": "BMICalculator",
    "record_type": "TOOL",
    "domain": "medical_assessment",
    "description": "Tool that calculates Body Mass Index (BMI) and classifies weight status",
    "code_snippet": "\nfrom pydantic import BaseModel, Field\nimport json\n\nfrom beeai_framework.context import RunContext\nfrom beeai_framework.emitter.emitter import Emitter\nfrom beeai_framework.tools.tool import StringToolOutput, Tool, ToolRunOptions\n\nclass BMIInput(BaseModel):\n    weight_kg: float = Field(description=\"Weight in kilograms\")\n    height_cm: float = Field(description=\"Height in centimeters\")\n\nclass BMICalculator(Tool[BMIInput, ToolRunOptions, StringToolOutput]):\n    \"\"\"Tool that calculates Body Mass Index (BMI) and classifies weight status.\"\"\"\n    name = \"BMICalculator\"\n    description = \"Calculates BMI using weight and height and provides weight status classification\"\n    input_schema = BMIInput\n\n    def _create_emitter(self) -> Emitter:\n        return Emitter.root().child(\n            namespace=[\"tool\", \"medical\", \"bmi_calculator\"],\n            creator=self,\n        )\n    \n    async def _run(self, input: BMIInput, options: ToolRunOptions | None, context: RunContext) -> StringToolOutput:\n        \"\"\"Calculate BMI and weight status from height and weight.\"\"\"\n        try:\n            # Extract input values\n            weight_kg = input.weight_kg\n            height_cm = input.height_cm\n            \n            # Convert height to meters\n            height_m = height_cm / 100.0\n            \n            # Calculate BMI: weight(kg) / height(m)\u00b2\n            bmi = weight_kg / (height_m * height_m)\n            \n            # Classify weight status based on BMI\n            weight_status = self._classify_bmi(bmi)\n            \n            # Determine health risk\n            health_risk = self._determine_health_risk(bmi)\n            \n            # Calculate healthy weight range for this height\n            lower_bound = 18.5 * (height_m * height_m)\n            upper_bound = 24.9 * (height_m * height_m)\n            \n            result = {\n                \"bmi\": round(bmi, 2),\n                \"weight_status\": weight_status,\n                \"health_risk\": health_risk,\n                \"healthy_weight_range\": {\n                    \"lower_bound_kg\": round(lower_bound, 1),\n                    \"upper_bound_kg\": round(upper_bound, 1)\n                },\n                \"input_values\": {\n                    \"weight_kg\": weight_kg,\n                    \"height_cm\": height_cm\n                }\n            }\n            \n            return StringToolOutput(json.dumps(result, indent=2))\n            \n        except Exception as e:\n            return StringToolOutput(json.dumps({\n                \"error\": f\"Error calculating BMI: {str(e)}\"\n            }, indent=2))\n    \n    def _classify_bmi(self, bmi: float) -> str:\n        \"\"\"Classify weight status based on BMI value.\"\"\"\n        if bmi < 16.0:\n            return \"Severe Thinness\"\n        elif bmi < 17.0:\n            return \"Moderate Thinness\"\n        elif bmi < 18.5:\n            return \"Mild Thinness\"\n        elif bmi < 25.0:\n            return \"Normal Weight\"\n        elif bmi < 30.0:\n            return \"Overweight\"\n        elif bmi < 35.0:\n            return \"Obese Class I\"\n        elif bmi < 40.0:\n            return \"Obese Class II\"\n        else:\n            return \"Obese Class III\"\n    \n    def _determine_health_risk(self, bmi: float) -> str:\n        \"\"\"Determine health risk based on BMI value.\"\"\"\n        if bmi < 18.5:\n            return \"Increased risk for certain nutritional deficiencies and medical complications\"\n        elif bmi < 25.0:\n            return \"Lowest risk for health issues related to weight\"\n        elif bmi < 30.0:\n            return \"Increased risk for heart disease, high blood pressure, type 2 diabetes\"\n        elif bmi < 35.0:\n            return \"High risk for heart disease, high blood pressure, type 2 diabetes\"\n        elif bmi < 40.0:\n            return \"Very high risk for cardiovascular and metabolic disorders\"\n        else:\n            return \"Extremely high risk for heart disease, diabetes, and overall mortality\"\n",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-22T05:35:54.513919",
    "last_updated": "2025-03-22T05:35:54.513947",
    "tags": [
      "medical",
      "assessment",
      "bmi",
      "calculator"
    ],
    "metadata": {
      "framework": "beeai"
    },
    "performance_metrics": {
      "total_executions": 0,
      "successful_executions": 0,
      "average_execution_time": 0.0,
      "capabilities": {},
      "domains": {},
      "last_execution": null
    },
    "capabilities": [
      {
        "id": "bmi_calculation",
        "name": "BMI Calculation",
        "description": "Calculates Body Mass Index from height and weight and classifies weight status",
        "context": {
          "required_fields": [
            "weight_kg",
            "height_cm"
          ],
          "produced_fields": [
            "bmi",
            "weight_status",
            "health_risk"
          ]
        }
      }
    ]
  },
  {
    "id": "ab278e22-8fd9-4fbf-bae8-832959787c7b",
    "name": "CardiovascularRiskCalculator",
    "record_type": "TOOL",
    "domain": "medical_assessment",
    "description": "Tool that calculates 10-year cardiovascular disease risk using established medical formulas",
    "code_snippet": "\nfrom pydantic import BaseModel, Field\nimport json\nimport math\n\nfrom beeai_framework.context import RunContext\nfrom beeai_framework.emitter.emitter import Emitter\nfrom beeai_framework.tools.tool import StringToolOutput, Tool, ToolRunOptions\n\nclass CVRiskInput(BaseModel):\n    age: int = Field(description=\"Age in years\")\n    sex: str = Field(description=\"Sex (Male or Female)\")\n    total_cholesterol: float = Field(description=\"Total Cholesterol in mg/dL\")\n    hdl_cholesterol: float = Field(description=\"HDL Cholesterol in mg/dL\")\n    systolic_bp: int = Field(description=\"Systolic Blood Pressure in mmHg\")\n    is_bp_treated: bool = Field(description=\"Whether BP is being treated with medication\")\n    is_smoker: bool = Field(description=\"Current smoking status\")\n    has_diabetes: bool = Field(description=\"Whether the patient has diabetes\")\n\nclass CardiovascularRiskCalculator(Tool[CVRiskInput, ToolRunOptions, StringToolOutput]):\n    \"\"\"Tool that calculates 10-year cardiovascular disease risk using medical formulas.\"\"\"\n    name = \"CardiovascularRiskCalculator\"\n    description = \"Calculates 10-year cardiovascular disease risk based on established risk factors\"\n    input_schema = CVRiskInput\n\n    def _create_emitter(self) -> Emitter:\n        return Emitter.root().child(\n            namespace=[\"tool\", \"medical\", \"cv_risk_calculator\"],\n            creator=self,\n        )\n    \n    async def _run(self, input: CVRiskInput, options: ToolRunOptions | None, context: RunContext) -> StringToolOutput:\n        \"\"\"Calculate 10-year cardiovascular disease risk using Framingham Risk Score.\"\"\"\n        try:\n            # Extract input values\n            age = input.age\n            sex = input.sex.lower()\n            total_cholesterol = input.total_cholesterol\n            hdl_cholesterol = input.hdl_cholesterol\n            systolic_bp = input.systolic_bp\n            is_bp_treated = input.is_bp_treated\n            is_smoker = input.is_smoker\n            has_diabetes = input.has_diabetes\n            \n            # Validate input\n            if age < 30 or age > 79:\n                return StringToolOutput(json.dumps({\n                    \"error\": \"Age must be between 30 and 79 years\",\n                    \"note\": \"Risk calculation is only validated for ages 30-79\"\n                }, indent=2))\n            \n            if sex not in [\"male\", \"female\"]:\n                return StringToolOutput(json.dumps({\n                    \"error\": \"Sex must be 'male' or 'female'\",\n                    \"input_received\": sex\n                }, indent=2))\n            \n            # Calculate Framingham Risk Score\n            if sex == \"male\":\n                # Male score calculation\n                # Age points\n                if age >= 30 and age <= 34:\n                    age_points = 0\n                elif age >= 35 and age <= 39:\n                    age_points = 2\n                elif age >= 40 and age <= 44:\n                    age_points = 5\n                elif age >= 45 and age <= 49:\n                    age_points = 6\n                elif age >= 50 and age <= 54:\n                    age_points = 8\n                elif age >= 55 and age <= 59:\n                    age_points = 10\n                elif age >= 60 and age <= 64:\n                    age_points = 11\n                elif age >= 65 and age <= 69:\n                    age_points = 12\n                elif age >= 70 and age <= 74:\n                    age_points = 14\n                else:  # 75-79\n                    age_points = 15\n                \n                # Total Cholesterol points\n                if total_cholesterol < 160:\n                    chol_points = 0\n                elif total_cholesterol < 200:\n                    chol_points = 1\n                elif total_cholesterol < 240:\n                    chol_points = 2\n                elif total_cholesterol < 280:\n                    chol_points = 3\n                else:\n                    chol_points = 4\n                \n                # HDL Cholesterol points\n                if hdl_cholesterol >= 60:\n                    hdl_points = -2\n                elif hdl_cholesterol >= 50:\n                    hdl_points = -1\n                elif hdl_cholesterol >= 40:\n                    hdl_points = 0\n                else:\n                    hdl_points = 2\n                \n                # Blood Pressure points\n                if not is_bp_treated:\n                    if systolic_bp < 120:\n                        bp_points = -2\n                    elif systolic_bp < 130:\n                        bp_points = 0\n                    elif systolic_bp < 140:\n                        bp_points = 1\n                    elif systolic_bp < 160:\n                        bp_points = 2\n                    else:\n                        bp_points = 3\n                else:\n                    if systolic_bp < 120:\n                        bp_points = 0\n                    elif systolic_bp < 130:\n                        bp_points = 2\n                    elif systolic_bp < 140:\n                        bp_points = 3\n                    elif systolic_bp < 160:\n                        bp_points = 4\n                    else:\n                        bp_points = 5\n                \n                # Smoking points\n                smoking_points = 4 if is_smoker else 0\n                \n                # Diabetes points\n                diabetes_points = 3 if has_diabetes else 0\n                \n                # Total points\n                total_points = age_points + chol_points + hdl_points + bp_points + smoking_points + diabetes_points\n                \n                # Convert points to 10-year risk percentage\n                risk_mapping = {\n                    -3: 0.005, -2: 0.01, -1: 0.01, 0: 0.01, 1: 0.01, 2: 0.01, 3: 0.01, 4: 0.01, 5: 0.02,\n                    6: 0.02, 7: 0.03, 8: 0.04, 9: 0.05, 10: 0.06, 11: 0.08, 12: 0.10, 13: 0.12, 14: 0.16,\n                    15: 0.20, 16: 0.25, 17: 0.30, 18: 0.35, 19: 0.40, 20: 0.47, 21: 0.54, 22: 0.60, 23: 0.68,\n                    24: 0.76, 25: 0.85\n                }\n                \n                # Cap points to the range we have\n                if total_points < -3:\n                    total_points = -3\n                elif total_points > 25:\n                    total_points = 25\n                \n                risk_percentage = risk_mapping[total_points] * 100\n                \n            else:  # Female calculation\n                # Age points\n                if age >= 30 and age <= 34:\n                    age_points = 0\n                elif age >= 35 and age <= 39:\n                    age_points = 2\n                elif age >= 40 and age <= 44:\n                    age_points = 4\n                elif age >= 45 and age <= 49:\n                    age_points = 5\n                elif age >= 50 and age <= 54:\n                    age_points = 7\n                elif age >= 55 and age <= 59:\n                    age_points = 8\n                elif age >= 60 and age <= 64:\n                    age_points = 9\n                elif age >= 65 and age <= 69:\n                    age_points = 10\n                elif age >= 70 and age <= 74:\n                    age_points = 11\n                else:  # 75-79\n                    age_points = 12\n                \n                # Total Cholesterol points\n                if total_cholesterol < 160:\n                    chol_points = 0\n                elif total_cholesterol < 200:\n                    chol_points = 1\n                elif total_cholesterol < 240:\n                    chol_points = 3\n                elif total_cholesterol < 280:\n                    chol_points = 4\n                else:\n                    chol_points = 5\n                \n                # HDL Cholesterol points\n                if hdl_cholesterol >= 60:\n                    hdl_points = -2\n                elif hdl_cholesterol >= 50:\n                    hdl_points = -1\n                elif hdl_cholesterol >= 40:\n                    hdl_points = 0\n                else:\n                    hdl_points = 2\n                \n                # Blood Pressure points\n                if not is_bp_treated:\n                    if systolic_bp < 120:\n                        bp_points = -3\n                    elif systolic_bp < 130:\n                        bp_points = 0\n                    elif systolic_bp < 140:\n                        bp_points = 1\n                    elif systolic_bp < 150:\n                        bp_points = 2\n                    elif systolic_bp < 160:\n                        bp_points = 3\n                    else:\n                        bp_points = 4\n                else:\n                    if systolic_bp < 120:\n                        bp_points = -1\n                    elif systolic_bp < 130:\n                        bp_points = 2\n                    elif systolic_bp < 140:\n                        bp_points = 3\n                    elif systolic_bp < 150:\n                        bp_points = 5\n                    elif systolic_bp < 160:\n                        bp_points = 6\n                    else:\n                        bp_points = 7\n                \n                # Smoking points\n                smoking_points = 3 if is_smoker else 0\n                \n                # Diabetes points\n                diabetes_points = 4 if has_diabetes else 0\n                \n                # Total points\n                total_points = age_points + chol_points + hdl_points + bp_points + smoking_points + diabetes_points\n                \n                # Convert points to 10-year risk percentage\n                risk_mapping = {\n                    -2: 0.01, -1: 0.01, 0: 0.01, 1: 0.01, 2: 0.01, 3: 0.01, 4: 0.01, 5: 0.02,\n                    6: 0.02, 7: 0.02, 8: 0.03, 9: 0.03, 10: 0.04, 11: 0.04, 12: 0.05, 13: 0.06,\n                    14: 0.07, 15: 0.08, 16: 0.09, 17: 0.11, 18: 0.13, 19: 0.14, 20: 0.17,\n                    21: 0.20, 22: 0.24, 23: 0.27, 24: 0.32, 25: 0.37\n                }\n                \n                # Cap points to the range we have\n                if total_points < -2:\n                    total_points = -2\n                elif total_points > 25:\n                    total_points = 25\n                \n                risk_percentage = risk_mapping[total_points] * 100\n            \n            # Classify risk level\n            risk_level = self._classify_risk(risk_percentage)\n            \n            # Generate recommendations based on risk level\n            recommendations = self._generate_recommendations(risk_level, is_smoker, has_diabetes, systolic_bp, total_cholesterol, hdl_cholesterol)\n            \n            result = {\n                \"risk_percentage\": round(risk_percentage, 1),\n                \"risk_level\": risk_level,\n                \"risk_factors\": {\n                    \"age\": age,\n                    \"sex\": sex,\n                    \"total_cholesterol\": total_cholesterol,\n                    \"hdl_cholesterol\": hdl_cholesterol,\n                    \"systolic_bp\": systolic_bp,\n                    \"on_bp_medication\": is_bp_treated,\n                    \"smoker\": is_smoker,\n                    \"diabetes\": has_diabetes\n                },\n                \"points\": {\n                    \"total_points\": total_points,\n                    \"breakdown\": {\n                        \"age\": age_points,\n                        \"cholesterol\": chol_points,\n                        \"hdl\": hdl_points,\n                        \"blood_pressure\": bp_points,\n                        \"smoking\": smoking_points,\n                        \"diabetes\": diabetes_points\n                    }\n                },\n                \"recommendations\": recommendations,\n                \"disclaimer\": \"This risk calculation is based on the Framingham Risk Score and should be considered as an estimate. Always consult with a healthcare professional for a thorough assessment.\"\n            }\n            \n            return StringToolOutput(json.dumps(result, indent=2))\n            \n        except Exception as e:\n            import traceback\n            return StringToolOutput(json.dumps({\n                \"error\": f\"Error calculating cardiovascular risk: {str(e)}\",\n                \"traceback\": traceback.format_exc()\n            }, indent=2))\n    \n    def _classify_risk(self, risk_percentage: float) -> str:\n        \"\"\"Classify CVD risk level based on percentage.\"\"\"\n        if risk_percentage < 5:\n            return \"Low Risk\"\n        elif risk_percentage < 10:\n            return \"Moderate Risk\"\n        elif risk_percentage < 20:\n            return \"High Risk\"\n        else:\n            return \"Very High Risk\"\n    \n    def _generate_recommendations(self, risk_level: str, is_smoker: bool, has_diabetes: bool, \n                                systolic_bp: int, total_cholesterol: float, hdl_cholesterol: float) -> List[str]:\n        \"\"\"Generate recommendations based on risk level and factors.\"\"\"\n        recommendations = []\n        \n        # Basic recommendations for everyone\n        recommendations.append(\"Maintain a heart-healthy diet rich in fruits, vegetables, whole grains, and lean proteins\")\n        recommendations.append(\"Engage in regular physical activity (at least 150 minutes of moderate exercise per week)\")\n        \n        # Risk-level specific recommendations\n        if risk_level == \"Low Risk\":\n            recommendations.append(\"Continue current healthy practices and have risk factors reassessed in 3-5 years\")\n        elif risk_level == \"Moderate Risk\":\n            recommendations.append(\"Consider discussing preventive strategies with your healthcare provider\")\n            recommendations.append(\"Have risk factors reassessed annually\")\n        elif risk_level == \"High Risk\":\n            recommendations.append(\"Consult with healthcare provider to develop a risk reduction plan\")\n            recommendations.append(\"Consider more intensive lifestyle modifications and possible medical interventions\")\n        else:  # Very High Risk\n            recommendations.append(\"Urgent consultation with healthcare provider is recommended\")\n            recommendations.append(\"Intensive risk factor modification and close medical supervision is advised\")\n        \n        # Factor-specific recommendations\n        if is_smoker:\n            recommendations.append(\"Smoking cessation is strongly recommended - consider cessation programs or medications\")\n        \n        if has_diabetes:\n            recommendations.append(\"Ensure optimal diabetes management with regular monitoring and medication adherence\")\n        \n        if systolic_bp >= 140:\n            recommendations.append(\"Blood pressure management through diet, exercise, stress reduction, and medication if prescribed\")\n        \n        if total_cholesterol >= 200:\n            recommendations.append(\"Cholesterol management through diet, exercise, and medication if prescribed\")\n        \n        if hdl_cholesterol < 40:\n            recommendations.append(\"Increase HDL ('good' cholesterol) through regular exercise and heart-healthy diet\")\n        \n        return recommendations\n",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-22T05:35:54.517701",
    "last_updated": "2025-03-22T05:35:54.517710",
    "tags": [
      "medical",
      "cardiology",
      "risk_assessment",
      "framingham"
    ],
    "metadata": {
      "framework": "beeai"
    },
    "performance_metrics": {
      "total_executions": 0,
      "successful_executions": 0,
      "average_execution_time": 0.0,
      "capabilities": {},
      "domains": {},
      "last_execution": null
    },
    "capabilities": [
      {
        "id": "cardiovascular_risk_calculation",
        "name": "Cardiovascular Risk Calculation",
        "description": "Calculates 10-year cardiovascular disease risk using established medical formulas like Framingham Risk Score",
        "context": {
          "required_fields": [
            "age",
            "sex",
            "total_cholesterol",
            "hdl_cholesterol",
            "systolic_bp",
            "is_bp_treated",
            "is_smoker",
            "has_diabetes"
          ],
          "produced_fields": [
            "risk_percentage",
            "risk_level",
            "recommendations"
          ]
        }
      }
    ]
  },
  {
    "id": "387858a3-c4b7-433f-b7c9-24cf3c187fae",
    "name": "PhysiologicalDataExtractor",
    "record_type": "AGENT",
    "domain": "medical_assessment",
    "description": "An agent that extracts structured physiological data from medical records for analysis",
    "code_snippet": "\nfrom typing import List, Dict, Any, Optional\nimport re\n\nfrom beeai_framework.agents.react import ReActAgent\nfrom beeai_framework.agents.types import AgentMeta\nfrom beeai_framework.memory import TokenMemory\nfrom beeai_framework.backend.chat import ChatModel\nfrom beeai_framework.tools.tool import Tool\n\nclass PhysiologicalDataExtractorInitializer:\n    \"\"\"\n    An agent that extracts structured physiological data from medical records.\n    This agent identifies and extracts vital signs, lab values, and other physiological \n    measurements for use in medical calculations and assessments.\n    \"\"\"\n    \n    @staticmethod\n    def create_agent(llm: ChatModel, tools: Optional[List[Tool]] = None) -> ReActAgent:\n        \"\"\"Create and configure the physiological data extractor agent.\"\"\"\n        # Use empty tools list if none provided\n        if tools is None:\n            tools = []\n            \n        # Define agent metadata\n        meta = AgentMeta(\n            name=\"PhysiologicalDataExtractor\",\n            description=(\n                \"I am a physiological data extraction agent that analyzes medical records \"\n                \"to identify and extract structured data on vital signs, lab values, \"\n                \"anthropometric measurements, and other physiological parameters. \"\n                \"I convert unstructured medical text into structured data suitable for \"\n                \"medical calculations and risk assessments. I also identify relevant \"\n                \"medical history elements that may impact physiological interpretations.\"\n            ),\n            tools=tools\n        )\n        \n        # Create the agent\n        agent = ReActAgent(\n            llm=llm,\n            tools=tools,\n            memory=TokenMemory(llm),\n            meta=meta\n        )\n        \n        return agent\n    \n    @staticmethod\n    async def extract_data(medical_text: str) -> Dict[str, Any]:\n        \"\"\"\n        Extract physiological data from medical text.\n        \n        Args:\n            medical_text: Medical record text to analyze\n            \n        Returns:\n            Dictionary containing structured physiological data\n        \"\"\"\n        # Initialize data dictionary\n        data = {\n            \"vital_signs\": {},\n            \"lab_values\": {},\n            \"anthropometrics\": {},\n            \"history\": {},\n            \"symptoms\": [],\n            \"patient_info\": {}\n        }\n        \n        # Extract patient info\n        patient_id_match = re.search(r'Patient ID: ([\\w\\d]+)', medical_text)\n        if patient_id_match:\n            data[\"patient_info\"][\"id\"] = patient_id_match.group(1)\n            \n        age_match = re.search(r'Age: (\\d+)', medical_text)\n        if age_match:\n            data[\"patient_info\"][\"age\"] = int(age_match.group(1))\n            \n        sex_match = re.search(r'Sex: (\\w+)', medical_text)\n        if sex_match:\n            data[\"patient_info\"][\"sex\"] = sex_match.group(1)\n        \n        # Extract vital signs\n        hr_match = re.search(r'Heart Rate: (\\d+)', medical_text) or re.search(r'HR: (\\d+)', medical_text)\n        if hr_match:\n            data[\"vital_signs\"][\"heart_rate\"] = int(hr_match.group(1))\n            \n        bp_match = re.search(r'Blood Pressure.*?: (\\d+)/(\\d+)', medical_text) or re.search(r'BP: (\\d+)/(\\d+)', medical_text)\n        if bp_match:\n            data[\"vital_signs\"][\"systolic_bp\"] = int(bp_match.group(1))\n            data[\"vital_signs\"][\"diastolic_bp\"] = int(bp_match.group(2))\n            \n        rr_match = re.search(r'Respiratory Rate: (\\d+)', medical_text) or re.search(r'RR: (\\d+)', medical_text)\n        if rr_match:\n            data[\"vital_signs\"][\"respiratory_rate\"] = int(rr_match.group(1))\n            \n        o2_match = re.search(r'Oxygen Saturation: (\\d+)', medical_text) or re.search(r'O2 Sat: (\\d+)', medical_text)\n        if o2_match:\n            data[\"vital_signs\"][\"oxygen_saturation\"] = int(o2_match.group(1))\n            \n        temp_match = re.search(r'Temperature: ([\\d\\.]+)', medical_text)\n        if temp_match:\n            data[\"vital_signs\"][\"temperature\"] = float(temp_match.group(1))\n        \n        # Extract lab values\n        chol_match = re.search(r'Total Cholesterol: (\\d+)', medical_text)\n        if chol_match:\n            data[\"lab_values\"][\"total_cholesterol\"] = int(chol_match.group(1))\n            \n        hdl_match = re.search(r'HDL Cholesterol: (\\d+)', medical_text)\n        if hdl_match:\n            data[\"lab_values\"][\"hdl_cholesterol\"] = int(hdl_match.group(1))\n            \n        ldl_match = re.search(r'LDL Cholesterol: (\\d+)', medical_text)\n        if ldl_match:\n            data[\"lab_values\"][\"ldl_cholesterol\"] = int(ldl_match.group(1))\n            \n        trig_match = re.search(r'Triglycerides: (\\d+)', medical_text)\n        if trig_match:\n            data[\"lab_values\"][\"triglycerides\"] = int(trig_match.group(1))\n            \n        glucose_match = re.search(r'Glucose: (\\d+)', medical_text) or re.search(r'Fasting Glucose: (\\d+)', medical_text)\n        if glucose_match:\n            data[\"lab_values\"][\"glucose\"] = int(glucose_match.group(1))\n            \n        hba1c_match = re.search(r'HbA1c: ([\\d\\.]+)%', medical_text)\n        if hba1c_match:\n            data[\"lab_values\"][\"hba1c\"] = float(hba1c_match.group(1))\n        \n        # Extract anthropometrics\n        height_match = re.search(r'Height: (\\d+) cm', medical_text)\n        if height_match:\n            data[\"anthropometrics\"][\"height_cm\"] = int(height_match.group(1))\n            \n        weight_match = re.search(r'Weight: (\\d+) kg', medical_text)\n        if weight_match:\n            data[\"anthropometrics\"][\"weight_kg\"] = int(weight_match.group(1))\n        \n        # Extract history elements\n        smoking_status = None\n        if re.search(r'(never smoker|never smoked)', medical_text, re.IGNORECASE):\n            smoking_status = \"never\"\n        elif re.search(r'(current smoker|actively smokes)', medical_text, re.IGNORECASE):\n            smoking_status = \"current\"\n        elif re.search(r'(former smoker|quit smoking|stopped smoking)', medical_text, re.IGNORECASE):\n            smoking_status = \"former\"\n            \n        if smoking_status:\n            data[\"history\"][\"smoking_status\"] = smoking_status\n        \n        diabetes_match = re.search(r'(diabetes|diabetic)', medical_text, re.IGNORECASE)\n        if diabetes_match:\n            # Check if it's a negation\n            if not re.search(r'(no diabetes|not diabetic|denies diabetes)', medical_text, re.IGNORECASE):\n                data[\"history\"][\"diabetes\"] = True\n            else:\n                data[\"history\"][\"diabetes\"] = False\n        \n        hypertension_match = re.search(r'(hypertension|high blood pressure)', medical_text, re.IGNORECASE)\n        if hypertension_match:\n            # Check if it's a negation\n            if not re.search(r'(no hypertension|denies hypertension)', medical_text, re.IGNORECASE):\n                data[\"history\"][\"hypertension\"] = True\n            else:\n                data[\"history\"][\"hypertension\"] = False\n        \n        # Extract if on blood pressure medication\n        bp_med_match = re.search(r'(lisinopril|atenolol|metoprolol|losartan|amlodipine|hydrochlorothiazide)', medical_text, re.IGNORECASE)\n        if bp_med_match or re.search(r'(blood pressure medication|antihypertensive)', medical_text, re.IGNORECASE):\n            data[\"history\"][\"on_bp_medication\"] = True\n        \n        # Extract symptoms\n        chest_pain_match = re.search(r'(chest pain|chest discomfort)', medical_text, re.IGNORECASE)\n        if chest_pain_match:\n            data[\"symptoms\"].append(\"chest_pain\")\n            \n        dyspnea_match = re.search(r'(shortness of breath|dyspnea)', medical_text, re.IGNORECASE)\n        if dyspnea_match:\n            data[\"symptoms\"].append(\"dyspnea\")\n            \n        fatigue_match = re.search(r'fatigue', medical_text, re.IGNORECASE)\n        if fatigue_match:\n            data[\"symptoms\"].append(\"fatigue\")\n        \n        # Additional context for cardiovascular risk assessment\n        data[\"cardiovascular_risk_factors\"] = {\n            \"age\": data[\"patient_info\"].get(\"age\"),\n            \"sex\": data[\"patient_info\"].get(\"sex\", \"\").lower(),\n            \"total_cholesterol\": data[\"lab_values\"].get(\"total_cholesterol\"),\n            \"hdl_cholesterol\": data[\"lab_values\"].get(\"hdl_cholesterol\"),\n            \"systolic_bp\": data[\"vital_signs\"].get(\"systolic_bp\"),\n            \"is_bp_treated\": data[\"history\"].get(\"on_bp_medication\", False),\n            \"is_smoker\": data[\"history\"].get(\"smoking_status\") == \"current\",\n            \"has_diabetes\": data[\"history\"].get(\"diabetes\", False)\n        }\n        \n        return data\n",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-22T05:35:54.519918",
    "last_updated": "2025-03-22T05:35:54.519929",
    "tags": [
      "medical",
      "extraction",
      "physiological",
      "data"
    ],
    "metadata": {
      "framework": "beeai"
    },
    "performance_metrics": {
      "total_executions": 0,
      "successful_executions": 0,
      "average_execution_time": 0.0,
      "capabilities": {},
      "domains": {},
      "last_execution": null
    },
    "capabilities": [
      {
        "id": "physiological_data_extraction",
        "name": "Physiological Data Extraction",
        "description": "Extracts structured physiological data from medical records including vital signs, lab values, and anthropometrics",
        "context": {
          "required_fields": [
            "medical_record_text"
          ],
          "produced_fields": [
            "structured_physiological_data",
            "vital_signs",
            "lab_values",
            "cardiovascular_risk_factors"
          ]
        }
      }
    ]
  },
  {
    "id": "85800e8c-7bfc-4a2d-93bd-bd2abbadea18",
    "name": "MedicalAnalysisAgent",
    "record_type": "AGENT",
    "domain": "medical_assessment",
    "description": "An agent that analyzes physiological data and risk scores to provide clinical interpretations and recommendations",
    "code_snippet": "\nfrom typing import List, Dict, Any, Optional\nimport json\n\nfrom beeai_framework.agents.react import ReActAgent\nfrom beeai_framework.agents.types import AgentMeta\nfrom beeai_framework.memory import TokenMemory\nfrom beeai_framework.backend.chat import ChatModel\nfrom beeai_framework.tools.tool import Tool\n\nclass MedicalAnalysisAgentInitializer:\n    \"\"\"\n    An agent that analyzes physiological data and risk scores to provide clinical interpretations.\n    This agent synthesizes various medical calculations and assessments to provide comprehensive\n    analysis and evidence-based recommendations.\n    \"\"\"\n    \n    @staticmethod\n    def create_agent(llm: ChatModel, tools: Optional[List[Tool]] = None) -> ReActAgent:\n        \"\"\"Create and configure the medical analysis agent.\"\"\"\n        # Use empty tools list if none provided\n        if tools is None:\n            tools = []\n            \n        # Define agent metadata\n        meta = AgentMeta(\n            name=\"MedicalAnalysisAgent\",\n            description=(\n                \"I am a medical analysis agent that interprets physiological data, risk scores, \"\n                \"and other clinical measurements to provide comprehensive clinical assessments. \"\n                \"I synthesize information from multiple sources, apply medical knowledge, and \"\n                \"generate evidence-based interpretations and recommendations. I always include \"\n                \"appropriate medical disclaimers and indicate when specialist consultation is advised.\"\n            ),\n            tools=tools\n        )\n        \n        # Create the agent\n        agent = ReActAgent(\n            llm=llm,\n            tools=tools,\n            memory=TokenMemory(llm),\n            meta=meta\n        )\n        \n        return agent\n    \n    @staticmethod\n    async def analyze_medical_data(structured_data: Dict[str, Any], risk_scores: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Analyze physiological data and risk scores to provide clinical interpretation.\n        \n        Args:\n            structured_data: Dictionary containing structured physiological data\n            risk_scores: Dictionary containing risk assessment scores\n            \n        Returns:\n            Dictionary containing medical analysis and recommendations\n        \"\"\"\n        # Initialize analysis dictionary\n        analysis = {\n            \"findings\": [],\n            \"interpretations\": [],\n            \"recommendations\": [],\n            \"flags\": [],\n            \"source_data\": {\n                \"physiological_data\": structured_data,\n                \"risk_scores\": risk_scores\n            },\n            \"disclaimer\": (\n                \"This analysis is generated using medical algorithms and should be used for informational purposes only. \"\n                \"It does not constitute medical advice, diagnosis, or treatment. Always consult with a qualified healthcare \"\n                \"provider regarding any medical concerns or conditions. This analysis may not account for all individual \"\n                \"factors or specific medical circumstances.\"\n            )\n        }\n        \n        # Extract key values for analysis\n        vital_signs = structured_data.get(\"vital_signs\", {})\n        lab_values = structured_data.get(\"lab_values\", {})\n        symptoms = structured_data.get(\"symptoms\", [])\n        cv_risk = risk_scores.get(\"cardiovascular_risk\", {})\n        bmi_data = risk_scores.get(\"bmi\", {})\n        \n        # Add findings based on physiological data\n        if vital_signs.get(\"systolic_bp\", 0) >= 140 or vital_signs.get(\"diastolic_bp\", 0) >= 90:\n            analysis[\"findings\"].append(\"Elevated blood pressure\")\n            \n        if vital_signs.get(\"heart_rate\", 0) > 100:\n            analysis[\"findings\"].append(\"Tachycardia\")\n        elif vital_signs.get(\"heart_rate\", 0) < 60:\n            analysis[\"findings\"].append(\"Bradycardia\")\n            \n        if lab_values.get(\"total_cholesterol\", 0) >= 200:\n            analysis[\"findings\"].append(\"Elevated total cholesterol\")\n            \n        if lab_values.get(\"ldl_cholesterol\", 0) >= 130:\n            analysis[\"findings\"].append(\"Elevated LDL cholesterol\")\n            \n        if lab_values.get(\"hdl_cholesterol\", 0) < 40:\n            analysis[\"findings\"].append(\"Low HDL cholesterol\")\n            \n        if lab_values.get(\"triglycerides\", 0) >= 150:\n            analysis[\"findings\"].append(\"Elevated triglycerides\")\n            \n        if lab_values.get(\"glucose\", 0) >= 126 or lab_values.get(\"hba1c\", 0) >= 6.5:\n            analysis[\"findings\"].append(\"Elevated glucose/HbA1c indicative of diabetes\")\n        elif lab_values.get(\"glucose\", 0) >= 100 or lab_values.get(\"hba1c\", 0) >= 5.7:\n            analysis[\"findings\"].append(\"Elevated glucose/HbA1c indicative of prediabetes\")\n        \n        # Add BMI findings if available\n        if bmi_data.get(\"bmi\", 0) >= 30:\n            analysis[\"findings\"].append(f\"Obesity (BMI: {bmi_data.get('bmi')})\")\n        elif bmi_data.get(\"bmi\", 0) >= 25:\n            analysis[\"findings\"].append(f\"Overweight (BMI: {bmi_data.get('bmi')})\")\n        \n        # Add cardiovascular risk assessment\n        if cv_risk.get(\"risk_percentage\", 0) > 0:\n            analysis[\"findings\"].append(f\"10-year cardiovascular risk: {cv_risk.get('risk_percentage')}% ({cv_risk.get('risk_level', 'Unknown')})\")\n            \n        # Add symptom findings\n        if \"chest_pain\" in symptoms:\n            analysis[\"findings\"].append(\"Patient reports chest pain/discomfort\")\n        if \"dyspnea\" in symptoms:\n            analysis[\"findings\"].append(\"Patient reports shortness of breath\")\n        if \"fatigue\" in symptoms:\n            analysis[\"findings\"].append(\"Patient reports fatigue\")\n        \n        # Generate interpretations\n        has_cv_symptoms = \"chest_pain\" in symptoms or \"dyspnea\" in symptoms\n        has_cv_risk_factors = (vital_signs.get(\"systolic_bp\", 0) >= 140 or \n                              lab_values.get(\"total_cholesterol\", 0) >= 200 or\n                              cv_risk.get(\"risk_percentage\", 0) >= 10)\n        \n        if has_cv_symptoms and has_cv_risk_factors:\n            analysis[\"interpretations\"].append(\n                \"Presence of both cardiac symptoms and multiple cardiovascular risk factors warrants \"\n                \"further cardiac evaluation to rule out coronary artery disease.\"\n            )\n            analysis[\"flags\"].append(\"Cardiac evaluation needed\")\n            \n        if cv_risk.get(\"risk_percentage\", 0) >= 20:\n            analysis[\"interpretations\"].append(\n                \"Very high 10-year cardiovascular risk indicates need for aggressive risk factor \"\n                \"modification and possible preventive pharmacotherapy.\"\n            )\n            analysis[\"flags\"].append(\"Aggressive CV risk reduction indicated\")\n            \n        elif cv_risk.get(\"risk_percentage\", 0) >= 10:\n            analysis[\"interpretations\"].append(\n                \"Elevated 10-year cardiovascular risk indicates need for risk factor modification \"\n                \"and consideration of preventive pharmacotherapy.\"\n            )\n            \n        if lab_values.get(\"ldl_cholesterol\", 0) >= 160:\n            analysis[\"interpretations\"].append(\n                \"Significantly elevated LDL cholesterol may warrant pharmacological intervention \"\n                \"in addition to lifestyle modifications.\"\n            )\n            \n        if vital_signs.get(\"systolic_bp\", 0) >= 160 or vital_signs.get(\"diastolic_bp\", 0) >= 100:\n            analysis[\"interpretations\"].append(\n                \"Significantly elevated blood pressure requires prompt management and \"\n                \"may indicate need for pharmacological intervention or adjustment.\"\n            )\n            analysis[\"flags\"].append(\"High blood pressure requiring prompt attention\")\n            \n        # Generate recommendations (incorporate any provided by risk score tools)\n        recommendations = set(cv_risk.get(\"recommendations\", []))\n        \n        # Add additional recommendations based on findings\n        if vital_signs.get(\"systolic_bp\", 0) >= 140 or vital_signs.get(\"diastolic_bp\", 0) >= 90:\n            recommendations.add(\"Regular blood pressure monitoring and follow-up with healthcare provider\")\n            \n        if lab_values.get(\"total_cholesterol\", 0) >= 200 or lab_values.get(\"ldl_cholesterol\", 0) >= 130:\n            recommendations.add(\"Lipid management through diet, exercise, and possible pharmacotherapy\")\n            \n        if has_cv_symptoms:\n            recommendations.add(\"Cardiac evaluation including stress testing and/or cardiac imaging\")\n            \n        if bmi_data.get(\"bmi\", 0) >= 25:\n            recommendations.add(f\"Weight management through diet and exercise targeting a weight of {bmi_data.get('healthy_weight_range', {}).get('lower_bound_kg', '?')}-{bmi_data.get('healthy_weight_range', {}).get('upper_bound_kg', '?')} kg\")\n        \n        # Add recommendations to analysis\n        analysis[\"recommendations\"] = list(recommendations)\n        \n        # Add specialist consultation recommendations based on flags\n        if len(analysis[\"flags\"]) > 0:\n            analysis[\"recommendations\"].append(\n                \"Consultation with a cardiologist is recommended based on risk factors and findings\"\n            )\n        \n        return analysis\n",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-22T05:35:54.522592",
    "last_updated": "2025-03-22T05:35:54.522603",
    "tags": [
      "medical",
      "analysis",
      "interpretation",
      "assessment"
    ],
    "metadata": {
      "framework": "beeai"
    },
    "performance_metrics": {
      "total_executions": 0,
      "successful_executions": 0,
      "average_execution_time": 0.0,
      "capabilities": {},
      "domains": {},
      "last_execution": null
    },
    "capabilities": [
      {
        "id": "medical_data_analysis",
        "name": "Medical Data Analysis",
        "description": "Analyzes physiological data and risk scores to provide clinical interpretations and recommendations",
        "context": {
          "required_fields": [
            "structured_physiological_data",
            "risk_scores"
          ],
          "produced_fields": [
            "clinical_analysis",
            "interpretations",
            "recommendations",
            "flags"
          ]
        }
      }
    ]
  }
]