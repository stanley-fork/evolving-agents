[
  {
    "name": "DocumentAnalyzer",
    "record_type": "TOOL",
    "domain": "document_processing",
    "description": "Tool that analyzes and identifies the type of document from its content",
    "code_snippet": "\nfrom pydantic import BaseModel, Field\nimport json\nimport re\n\nfrom beeai_framework.context import RunContext\nfrom beeai_framework.emitter.emitter import Emitter\nfrom beeai_framework.tools.tool import StringToolOutput, Tool, ToolRunOptions\n\nclass DocumentAnalyzerInput(BaseModel):\n    text: str = Field(description=\"Document text to analyze\")\n\nclass DocumentAnalyzer(Tool[DocumentAnalyzerInput, ToolRunOptions, StringToolOutput]):\n    \"\"\"Tool that analyzes and identifies the type of document from its content.\"\"\"\n    name = \"DocumentAnalyzer\"\n    description = \"Analyzes document content to determine its type and key characteristics\"\n    input_schema = DocumentAnalyzerInput\n\n    def _create_emitter(self) -> Emitter:\n        return Emitter.root().child(\n            namespace=[\"tool\", \"document\", \"analyzer\"],\n            creator=self,\n        )\n    \n    async def _run(self, input: DocumentAnalyzerInput, options: ToolRunOptions | None, context: RunContext) -> StringToolOutput:\n        \"\"\"Analyze a document to identify its type based on content patterns.\"\"\"\n        document_text = input.text.lower()\n        \n        # Define type indicators with confidence scores\n        type_indicators = {\n            \"invoice\": [\"invoice\", \"bill\", \"payment\", \"due date\", \"total due\", \"vendor\", \"subtotal\", \"tax\"],\n            \"receipt\": [\"receipt\", \"payment received\", \"thank you for your purchase\", \"change\", \"cashier\"],\n            \"medical_record\": [\"patient\", \"diagnosis\", \"treatment\", \"prescription\", \"doctor\", \"hospital\", \"medical\"],\n            \"contract\": [\"agreement\", \"terms and conditions\", \"parties\", \"signed\", \"effective date\", \"termination\"],\n            \"resume\": [\"experience\", \"education\", \"skills\", \"employment\", \"resume\", \"cv\", \"curriculum vitae\"],\n            \"letter\": [\"dear\", \"sincerely\", \"regards\", \"to whom it may concern\"],\n            \"report\": [\"report\", \"findings\", \"analysis\", \"conclusion\", \"executive summary\"],\n        }\n        \n        # Calculate confidence scores for each document type\n        scores = {}\n        for doc_type, indicators in type_indicators.items():\n            score = 0\n            for indicator in indicators:\n                if indicator in document_text:\n                    score += 1\n            if score > 0:\n                confidence = min(0.9, score / len(indicators))  # Cap at 90% confidence\n                scores[doc_type] = confidence\n        \n        # Determine the most likely document type\n        if scores:\n            most_likely_type = max(scores.items(), key=lambda x: x[1])\n            doc_type, confidence = most_likely_type\n        else:\n            doc_type = \"unknown\"\n            confidence = 0.0\n        \n        # Extract key patterns based on document type\n        extracted_fields = {}\n        \n        # For invoices, get some key fields\n        if doc_type == \"invoice\":\n            # Extract invoice number\n            invoice_num_match = re.search(r'(?:invoice|inv)\\s*[#:]?\\s*(\\w+)', document_text, re.IGNORECASE)\n            if invoice_num_match:\n                extracted_fields[\"invoice_number\"] = invoice_num_match.group(1)\n                \n            # Extract total\n            total_match = re.search(r'total\\s*(?:due|amount)?\\s*[:$]?\\s*(\\d+[.,]?\\d*)', document_text)\n            if total_match:\n                extracted_fields[\"total\"] = total_match.group(1)\n        \n        # Build the response\n        result = {\n            \"document_type\": doc_type,\n            \"confidence\": confidence,\n            \"possible_types\": [k for k, v in scores.items() if v > 0.2],\n            \"extracted_fields\": extracted_fields\n        }\n        \n        return StringToolOutput(json.dumps(result, indent=2))\n",
    "version": "1.0.0",
    "tags": [
      "document",
      "analysis",
      "classification"
    ],
    "capabilities": [
      {
        "id": "document_analysis",
        "name": "Document Analysis",
        "description": "Analyzes and identifies the type of document from its content",
        "context": {
          "required_fields": [
            "document_text"
          ],
          "produced_fields": [
            "document_type",
            "confidence",
            "extracted_fields"
          ]
        }
      }
    ],
    "metadata": {
      "framework": "beeai"
    }
  },
  {
    "name": "CalculationVerifier",
    "record_type": "TOOL",
    "domain": "document_processing",
    "description": "Tool that verifies calculations in invoices, ensuring subtotal + tax = total",
    "code_snippet": "\nfrom pydantic import BaseModel, Field\nimport json\nimport re\n\nfrom beeai_framework.context import RunContext\nfrom beeai_framework.emitter.emitter import Emitter\nfrom beeai_framework.tools.tool import StringToolOutput, Tool, ToolRunOptions\n\nclass CalculationVerifierInput(BaseModel):\n    invoice_data: str = Field(description=\"JSON string containing invoice data with subtotal, tax, and total fields\")\n\nclass CalculationVerifier(Tool[CalculationVerifierInput, ToolRunOptions, StringToolOutput]):\n    \"\"\"Tool that verifies calculations in invoices, ensuring subtotal + tax = total.\"\"\"\n    name = \"CalculationVerifier\"\n    description = \"Verifies that calculations in an invoice are correct (subtotal + tax = total)\"\n    input_schema = CalculationVerifierInput\n\n    def _create_emitter(self) -> Emitter:\n        return Emitter.root().child(\n            namespace=[\"tool\", \"invoice\", \"verifier\"],\n            creator=self,\n        )\n    \n    async def _run(self, input: CalculationVerifierInput, options: ToolRunOptions | None, context: RunContext) -> StringToolOutput:\n        \"\"\"Verify that calculations in an invoice are correct (subtotal + tax = total).\"\"\"\n        try:\n            # Parse the invoice data\n            data = json.loads(input.invoice_data) if isinstance(input.invoice_data, str) else input.invoice_data\n            \n            # Extract the values\n            subtotal = None\n            tax = None\n            total = None\n            \n            if \"subtotal\" in data:\n                subtotal = float(str(data[\"subtotal\"]).replace(\"$\", \"\").replace(\",\", \"\"))\n            if \"tax\" in data:\n                if isinstance(data[\"tax\"], dict) and \"amount\" in data[\"tax\"]:\n                    tax = float(str(data[\"tax\"][\"amount\"]).replace(\"$\", \"\").replace(\",\", \"\"))\n                else:\n                    tax = float(str(data[\"tax\"]).replace(\"$\", \"\").replace(\",\", \"\"))\n            if \"total_due\" in data:\n                total = float(str(data[\"total_due\"]).replace(\"$\", \"\").replace(\",\", \"\"))\n            elif \"total\" in data:\n                total = float(str(data[\"total\"]).replace(\"$\", \"\").replace(\",\", \"\"))\n            \n            # Verify the calculation\n            if subtotal is not None and tax is not None and total is not None:\n                expected_total = subtotal + tax\n                is_correct = abs(expected_total - total) < 0.01  # Allow for small rounding differences\n                \n                result = {\n                    \"is_correct\": is_correct,\n                    \"subtotal\": subtotal,\n                    \"tax\": tax,\n                    \"expected_total\": expected_total,\n                    \"actual_total\": total,\n                    \"difference\": total - expected_total\n                }\n                \n                return StringToolOutput(json.dumps(result, indent=2))\n            else:\n                return StringToolOutput(json.dumps({\n                    \"is_correct\": False,\n                    \"error\": \"Missing required fields (subtotal, tax, or total)\",\n                    \"available_fields\": list(data.keys())\n                }, indent=2))\n                \n        except Exception as e:\n            return StringToolOutput(json.dumps({\n                \"is_correct\": False,\n                \"error\": f\"Error verifying calculations: {str(e)}\"\n            }, indent=2))\n",
    "version": "1.0.0",
    "tags": [
      "invoice",
      "calculation",
      "verification"
    ],
    "capabilities": [
      {
        "id": "calculation_verification",
        "name": "Calculation Verification",
        "description": "Verifies that calculations in an invoice are correct (subtotal + tax = total)",
        "context": {
          "required_fields": [
            "invoice_data"
          ],
          "produced_fields": [
            "is_correct",
            "expected_total",
            "difference"
          ]
        }
      }
    ],
    "metadata": {
      "framework": "beeai"
    }
  },
  {
    "name": "InvoiceSummaryGenerator",
    "record_type": "TOOL",
    "domain": "document_processing",
    "description": "Tool that generates a concise summary of an invoice's key information",
    "code_snippet": "\nfrom pydantic import BaseModel, Field\nimport json\nfrom datetime import datetime\n\nfrom beeai_framework.context import RunContext\nfrom beeai_framework.emitter.emitter import Emitter\nfrom beeai_framework.tools.tool import StringToolOutput, Tool, ToolRunOptions\n\nclass InvoiceSummaryInput(BaseModel):\n    invoice_data: str = Field(description=\"JSON string containing structured invoice data\")\n\nclass InvoiceSummaryGenerator(Tool[InvoiceSummaryInput, ToolRunOptions, StringToolOutput]):\n    \"\"\"Tool that generates a concise summary of an invoice's key information.\"\"\"\n    name = \"InvoiceSummaryGenerator\"\n    description = \"Generates a concise summary from structured invoice data\"\n    input_schema = InvoiceSummaryInput\n\n    def _create_emitter(self) -> Emitter:\n        return Emitter.root().child(\n            namespace=[\"tool\", \"invoice\", \"summary\"],\n            creator=self,\n        )\n    \n    async def _run(self, input: InvoiceSummaryInput, options: ToolRunOptions | None, context: RunContext) -> StringToolOutput:\n        \"\"\"Generate a concise summary of an invoice from structured data.\"\"\"\n        try:\n            # Parse the invoice data\n            data = json.loads(input.invoice_data) if isinstance(input.invoice_data, str) else input.invoice_data\n            \n            # Extract key information\n            invoice_number = data.get(\"invoice_number\", \"Unknown\")\n            date = data.get(\"date\", \"Unknown date\")\n            vendor_name = data.get(\"vendor\", {}).get(\"name\", data.get(\"vendor\", \"Unknown vendor\"))\n            total_due = data.get(\"total_due\", data.get(\"total\", \"Unknown amount\"))\n            due_date = data.get(\"due_date\", \"Unknown\")\n            \n            # Format as currency if needed\n            if isinstance(total_due, (int, float)):\n                total_due = f\"${total_due:,.2f}\"\n            \n            # Generate the summary\n            summary = {\n                \"summary\": f\"Invoice #{invoice_number} from {vendor_name}\",\n                \"key_details\": {\n                    \"invoice_number\": invoice_number,\n                    \"vendor\": vendor_name,\n                    \"date\": date,\n                    \"total_due\": total_due,\n                    \"due_date\": due_date\n                },\n                \"line_item_count\": len(data.get(\"items\", [])),\n                \"recommendations\": []\n            }\n            \n            # Add recommendations based on the data\n            if due_date:\n                try:\n                    due_date_obj = datetime.strptime(due_date, \"%Y-%m-%d\")\n                    today = datetime.now()\n                    days_until_due = (due_date_obj - today).days\n                    \n                    if days_until_due < 0:\n                        summary[\"recommendations\"].append(\"OVERDUE: Payment is past due\")\n                    elif days_until_due < 7:\n                        summary[\"recommendations\"].append(f\"URGENT: Payment due soon ({days_until_due} days)\")\n                    elif days_until_due < 30:\n                        summary[\"recommendations\"].append(f\"REMINDER: Payment due in {days_until_due} days\")\n                except:\n                    pass\n            \n            # Check for large amounts\n            try:\n                amount = float(str(total_due).replace(\"$\", \"\").replace(\",\", \"\"))\n                if amount > 1000:\n                    summary[\"recommendations\"].append(\"ATTENTION: Invoice amount exceeds $1,000\")\n            except:\n                pass\n                \n            return StringToolOutput(json.dumps(summary, indent=2))\n            \n        except Exception as e:\n            return StringToolOutput(json.dumps({\n                \"error\": f\"Error generating summary: {str(e)}\",\n                \"partial_summary\": \"Unable to generate complete summary due to an error\"\n            }, indent=2))\n",
    "version": "1.0.0",
    "tags": [
      "invoice",
      "summary",
      "report"
    ],
    "capabilities": [
      {
        "id": "summary_generation",
        "name": "Summary Generation",
        "description": "Generates a concise summary of an invoice with key details and recommendations",
        "context": {
          "required_fields": [
            "invoice_data"
          ],
          "produced_fields": [
            "summary",
            "key_details",
            "recommendations"
          ]
        }
      }
    ],
    "metadata": {
      "framework": "beeai"
    }
  },
  {
    "name": "OpenAIInvoiceProcessor",
    "record_type": "AGENT",
    "domain": "document_processing",
    "description": "An OpenAI agent specialized in processing invoice documents. This agent can extract structured data from invoices, verify calculations, identify key information, and follow governance rules for financial documents.",
    "code_snippet": "\nfrom agents import Agent, Runner, ModelSettings\n\n# Create an OpenAI agent for invoice processing\nagent = Agent(\n    name=\"InvoiceProcessor\",\n    instructions=\"\"\"\nYou are an expert invoice processing agent specialized in financial document analysis.\nExtract all important information from invoices including:\n- Invoice number\n- Date\n- Vendor information\n- Line items (description, quantity, price)\n- Subtotal, taxes, and total\n- Payment terms\n\nVerify that calculations are correct.\nFlag any suspicious or unusual patterns.\nStructure your output clearly and follow all governance rules for financial documents.\n\"\"\",\n    model=\"gpt-4o\",\n    model_settings=ModelSettings(\n        temperature=0.3  # Lower temperature for more precision\n    )\n)\n\n# Helper function to process invoices\nasync def process_invoice(invoice_text):\n    result = await Runner.run(agent, input=invoice_text)\n    return result.final_output\n",
    "version": "1.0.0",
    "tags": [
      "openai",
      "invoice",
      "financial",
      "agent"
    ],
    "capabilities": [
      {
        "id": "invoice_data_extraction",
        "name": "Invoice Data Extraction",
        "description": "Extracts structured data from invoice documents including invoice number, date, vendor, line items, and totals",
        "context": {
          "required_fields": [
            "invoice_text"
          ],
          "produced_fields": [
            "structured_invoice_data"
          ]
        }
      }
    ],
    "metadata": {
      "framework": "openai-agents",
      "model": "gpt-4o",
      "model_settings": {
        "temperature": 0.3
      },
      "guardrails_enabled": true
    }
  }
]